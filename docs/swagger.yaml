basePath: /
definitions:
  common.Response:
    properties:
      data: {}
      error:
        type: string
      status:
        type: string
    type: object
  dto.CreateAdminRequest:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      password:
        type: string
    required:
    - email
    - firstname
    - lastname
    - password
    type: object
  dto.CreateAdminResponse:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      role:
        type: string
    type: object
  dto.CreateAppointmentRequest:
    properties:
      complaint:
        type: string
      healthcare_worker_id:
        type: integer
      location:
        type: string
      note:
        type: string
      schedule_date:
        type: string
      schedule_time:
        type: string
      status:
        type: string
    required:
    - complaint
    - healthcare_worker_id
    - location
    - schedule_date
    - schedule_time
    - status
    type: object
  dto.CreateAppointmentResponse:
    properties:
      complaint:
        type: string
      healthcare_worker_id:
        type: integer
      id:
        type: integer
      location:
        type: string
      note:
        type: string
      patient_id:
        type: integer
      schedule_date:
        type: string
      schedule_time:
        type: string
      status:
        type: string
    type: object
  dto.CreateDeliveryRequest:
    properties:
      drug_id:
        type: integer
      note:
        type: string
      status:
        type: string
      tracking_url:
        type: string
    type: object
  dto.CreateDeliveryResponse:
    properties:
      drug_id:
        type: integer
      id:
        type: integer
      note:
        type: string
      status:
        type: string
      tracking_url:
        type: string
      user_id:
        type: integer
    type: object
  dto.CreateDoctorRequest:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      no_sip:
        type: string
      password:
        type: string
    required:
    - email
    - firstname
    - lastname
    - no_sip
    - password
    type: object
  dto.CreateDoctorResponse:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      no_sip:
        type: string
      role:
        type: string
    type: object
  dto.CreateDrugRequest:
    properties:
      class:
        type: string
      code:
        type: string
      description:
        type: string
      dose:
        type: string
      ingredient:
        type: string
      instruction:
        type: string
      name:
        type: string
      warning:
        type: string
    type: object
  dto.CreateDrugResponse:
    properties:
      class:
        type: string
      code:
        type: string
      description:
        type: string
      dose:
        type: string
      id:
        type: integer
      ingredient:
        type: string
      instruction:
        type: string
      name:
        type: string
      warning:
        type: string
    type: object
  dto.CreateFeedbackCategoryRequest:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - description
    - name
    type: object
  dto.CreateFeedbackCategoryResponse:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  dto.CreateFeedbackRequest:
    properties:
      detail:
        type: string
      feedback_category_id:
        type: integer
      issue:
        type: string
    required:
    - detail
    - feedback_category_id
    - issue
    type: object
  dto.CreateFeedbackResponse:
    properties:
      detail:
        type: string
      feedback_category_id:
        type: integer
      issue:
        type: string
    required:
    - feedback_category_id
    type: object
  dto.CreateForumCommentRequest:
    properties:
      comment:
        type: string
    type: object
  dto.CreateForumCommentResponse:
    properties:
      comment:
        type: string
      created_at:
        type: string
      forum_id:
        type: integer
      id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  dto.CreateForumRequest:
    properties:
      description:
        type: string
      title:
        type: string
    type: object
  dto.CreateForumResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
      vote:
        type: integer
    type: object
  dto.CreatePharmacistRequest:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      no_sipa:
        type: string
      password:
        type: string
    required:
    - email
    - firstname
    - lastname
    - no_sipa
    - password
    type: object
  dto.CreatePharmacistResponse:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      no_sipa:
        type: string
      role:
        type: string
    type: object
  dto.CreateUserDrugRequest:
    properties:
      drug_id:
        type: integer
      frequency_per_day:
        type: integer
      note:
        type: string
      status:
        type: string
      user_id:
        type: integer
    type: object
  dto.CreateUserDrugResponse:
    properties:
      drug_id:
        type: integer
      frequency_per_day:
        type: integer
      id:
        type: integer
      note:
        type: string
      status:
        type: string
      user_id:
        type: integer
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      password:
        type: string
    required:
    - email
    - firstname
    - lastname
    - password
    type: object
  dto.CreateUserResponse:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      role:
        type: string
    type: object
  dto.EditUserRequest:
    properties:
      age:
        type: integer
      firstname:
        type: string
      height:
        type: number
      lastname:
        type: string
      no_sip:
        type: string
      no_sipa:
        type: string
      password:
        type: string
      specialist:
        type: string
      title:
        type: string
      weight:
        type: number
    type: object
  dto.EditUserResponse:
    properties:
      age:
        type: integer
      firstname:
        type: string
      height:
        type: number
      lastname:
        type: string
      no_sip:
        type: string
      no_sipa:
        type: string
      specialist:
        type: string
      title:
        type: string
      weight:
        type: number
    type: object
  dto.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.GoogleLoginRequest:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      token:
        type: string
    type: object
  dto.ResetPasswordRequest:
    properties:
      password:
        type: string
      token:
        type: string
    required:
    - password
    - token
    type: object
  dto.Status:
    properties:
      data: {}
      name:
        type: string
      status:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: API definition for FarmaCare Server
  title: FarmaCare Server
  version: "1.0"
paths:
  /appointment/create:
    post:
      consumes:
      - application/json
      description: Put all mandatory parameter
      parameters:
      - description: CreateAppointmentRequest
        in: body
        name: CreateAppointmentRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CreateAppointmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreateAppointmentResponse'
      summary: Create Appointment
      tags:
      - Appointment
  /appointment/user:
    get:
      consumes:
      - application/json
      description: Put all mandatory parameter
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
      summary: Get All Appointment For Current User
      tags:
      - Appointment
  /appointment/user/:id:
    get:
      consumes:
      - application/json
      description: Put all mandatory parameter
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
      summary: Get Appointment By User Id
      tags:
      - Appointment
  /auth/credential:
    get:
      consumes:
      - application/json
      description: Put all mandatory parameter
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Get User Credential
      tags:
      - Auth
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Put all mandatory parameter
      parameters:
      - description: ForgotPasswordRequest
        in: body
        name: ForgotPasswordRequest
        required: true
        schema:
          $ref: '#/definitions/dto.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ForgotPasswordRequest'
      summary: Forgot Password
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Put all mandatory parameter
      parameters:
      - description: LoginRequest
        in: body
        name: LoginRequest
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
      summary: Login User Google
      tags:
      - Auth
  /auth/login-google:
    post:
      consumes:
      - application/json
      description: Put all mandatory parameter
      parameters:
      - description: GoogleLoginRequest
        in: body
        name: GoogleLoginRequest
        required: true
        schema:
          $ref: '#/definitions/dto.GoogleLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
      summary: Login User
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Put all mandatory parameter
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Logout User
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Put all mandatory parameter
      parameters:
      - description: CreateUserRequest
        in: body
        name: CreateUserRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreateUserResponse'
      summary: Register New User
      tags:
      - Auth
  /auth/register/admin:
    post:
      consumes:
      - application/json
      description: Put all mandatory parameter
      parameters:
      - description: CreateAdminRequest
        in: body
        name: CreateAdminRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CreateAdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreateAdminResponse'
      summary: Register New Admin
      tags:
      - Auth
  /auth/register/doctor:
    post:
      consumes:
      - application/json
      description: Put all mandatory parameter
      parameters:
      - description: CreateDoctorRequest
        in: body
        name: CreateDoctorRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CreateDoctorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreateDoctorResponse'
      summary: Register New Doctor
      tags:
      - Auth
  /auth/register/pharmacist:
    post:
      consumes:
      - application/json
      description: Put all mandatory parameter
      parameters:
      - description: CreatePharmacistRequest
        in: body
        name: CreatePharmacistRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePharmacistRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreatePharmacistResponse'
      summary: Register New Pharmacist
      tags:
      - Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Put all mandatory parameter
      parameters:
      - description: ResetPasswordRequest
        in: body
        name: ResetPasswordRequest
        required: true
        schema:
          $ref: '#/definitions/dto.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResetPasswordRequest'
      summary: Reset Password
      tags:
      - Auth
  /community/forum:
    get:
      consumes:
      - application/json
      description: Put all mandatory parameter
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
      summary: Get All Forum
      tags:
      - Community
  /community/forum/:id/comment/:
    get:
      consumes:
      - application/json
      description: Put all mandatory parameter
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
      summary: Get All Forum Comment By Forum ID
      tags:
      - Community
  /community/forum/comment/create:
    post:
      consumes:
      - application/json
      description: Put all mandatory parameter
      parameters:
      - description: CreateForumCommentRequest
        in: body
        name: CreateForumCommentRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CreateForumCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.CreateForumCommentResponse'
            type: array
      summary: Create Forum Comment
      tags:
      - Community
  /community/forum/create:
    post:
      consumes:
      - application/json
      description: Put all mandatory parameter
      parameters:
      - description: CreateForumRequest
        in: body
        name: CreateForumRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CreateForumRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.CreateForumResponse'
            type: array
      summary: Create Forum
      tags:
      - Community
  /delivery:
    get:
      consumes:
      - application/json
      description: Put all mandatory parameter
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
      summary: Get All Delivery
      tags:
      - Delivery
  /delivery/create:
    post:
      consumes:
      - application/json
      description: Put all mandatory parameter
      parameters:
      - description: CreateDeliveryRequest
        in: body
        name: CreateDeliveryRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CreateDeliveryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.CreateDeliveryResponse'
            type: array
      summary: Create Delivery
      tags:
      - Delivery
  /feedback:
    get:
      consumes:
      - application/json
      description: Put all mandatory parameter
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
      summary: Get All Feedback
      tags:
      - Feedback
  /feedback/category:
    get:
      consumes:
      - application/json
      description: Put all mandatory parameter
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Get All Feedback Category
      tags:
      - Feedback
  /feedback/category/{id}:
    get:
      consumes:
      - application/json
      description: Put all mandatory parameter
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Get Feedback Category By Id
      tags:
      - Feedback
  /feedback/category/create:
    post:
      consumes:
      - application/json
      description: Put all mandatory parameter
      parameters:
      - description: CreateFeedbackCategoryRequest
        in: body
        name: CreateFeedbackCategoryRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CreateFeedbackCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreateFeedbackCategoryResponse'
      summary: Create Feedback Category
      tags:
      - Feedback
  /feedback/create:
    post:
      consumes:
      - application/json
      description: Put all mandatory parameter
      parameters:
      - description: CreateFeedbackRequest
        in: body
        name: CreateFeedbackRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CreateFeedbackRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreateFeedbackResponse'
      summary: Create Feedback
      tags:
      - Feedback
  /feedback/user/:id:
    get:
      consumes:
      - application/json
      description: Put all mandatory parameter
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
      summary: Get Feedback By User Id
      tags:
      - Feedback
  /healthcheck:
    get:
      consumes:
      - application/json
      description: Put all mandatory parameter
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.Status'
            type: array
      summary: Check System Status
      tags:
      - Healthcheck
  /management/drug:
    get:
      consumes:
      - application/json
      description: Put all mandatory parameter
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
      summary: Get All Drug
      tags:
      - Management
  /management/drug/create:
    post:
      consumes:
      - application/json
      description: Put all mandatory parameter
      parameters:
      - description: CreateDrugRequest
        in: body
        name: CreateDrugRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CreateDrugRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.CreateDrugResponse'
            type: array
      summary: Create Drug
      tags:
      - Management
  /management/user/drug:
    get:
      consumes:
      - application/json
      description: Put all mandatory parameter
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
      summary: Get All User Drug For Current User
      tags:
      - Management
  /management/user/drug/:id:
    get:
      consumes:
      - application/json
      description: Put all mandatory parameter
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
      summary: Get All User Drug By User ID
      tags:
      - Management
  /management/user/drug/create:
    post:
      consumes:
      - application/json
      description: Put all mandatory parameter
      parameters:
      - description: CreateUserDrugRequest
        in: body
        name: CreateUserDrugRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserDrugRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.CreateUserDrugResponse'
            type: array
      summary: Create User Drug
      tags:
      - Management
  /profile:
    get:
      consumes:
      - application/json
      description: Put all mandatory parameter
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Get User Profile
      tags:
      - Profile
  /profile/edit:
    put:
      consumes:
      - application/json
      description: Put all mandatory parameter
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: EditUserRequest
        in: body
        name: EditUserRequest
        required: true
        schema:
          $ref: '#/definitions/dto.EditUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.EditUserResponse'
      summary: Edit User Profile
      tags:
      - Profile
swagger: "2.0"
